import org.gradle.internal.os.OperatingSystem
import org.lifecompanion.build.PublishInstallerTask;

plugins {
    id 'application'
    id 'org.openjfx.javafxplugin' version '0.1.0'
    id 'org.beryx.jlink' version '3.0.1'
    id 'org.javamodularity.moduleplugin' version '1.8.15'
    id 'org.lifecompanion.gradle.plugin.env-conf'
    id 'org.lifecompanion.gradle.plugin.download-jdk-jfx'
    id 'org.lifecompanion.gradle.plugin.publish-installer'
}

javafx {
    version = '22'
    modules = ['javafx.controls']
}

// Use app version as displayed version when needed, but maintain a installer version for update server
version = project.property('lifecompanion.app.version')
mainClassName = 'org.lifecompanion.installer.InstallerApp'

application {
    mainModule = 'org.lifecompanion.installer'
}

dependencies {
    implementation 'com.github.oshi:oshi-core:4.5.2'
    implementation 'com.github.vatbub:mslinks:1.0.5'
    implementation 'ch.qos.logback:logback-classic:1.5.5'
    implementation 'org.lifecompanion:lc-framework-commons-fx:1.0.0'
    implementation 'org.lifecompanion:lc-framework-client:1.0.0'
}

jlink {
    mergedModule {
        excludeRequires  'ch.qos.logback.classic'
    }
    targetPlatform('win_x64') {
        jdkHome = "${project.property('jdk_win_x64')}"
        addExtraModulePath("${project.property('jfx_win_x64')}")
    }
    targetPlatform('linux_x64') {
        jdkHome = "${project.property('jdk_linux_x64')}"
        addExtraModulePath("${project.property('jfx_linux_x64')}")
    }
    targetPlatform('mac_x64') {
        jdkHome = "${project.property('jdk_mac_x64')}"
        addExtraModulePath("${project.property('jfx_mac_x64')}")
    }
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages',
               // needed for SSL certificates
               '--add-modules', 'jdk.crypto.cryptoki,jdk.crypto.ec']

    launcher {
        name = 'lifecompanion-installer'
        args = ['-Djava.net.useSystemProxies=true']
        // source adapted from https://github.com/beryx/badass-jlink-plugin/blob/master/src/main/resources/unixScriptTemplate.txt
        unixScriptTemplate = file('build-src/installer-unix-template.txt')
    }
}

processResources {
    outputs.upToDateWhen { false }
    filesMatching('**installer.properties') {
        expand(
                'appId': appId,
                'version': project.version,
                'buildDate': new Date().getTime(),
                'updateServerUrl': project.property('lifecompanion.framework.server.url'),
                'appServerUrl': project.property('lifecompanion.app.server.url'),
                'appServerQueryParameters': project.property('lifecompanion.app.server.query.parameters'),
                'installationPublicKey': project.property('lifecompanion.app.server.public_key')
        )
    }
    from('../../') {
        include 'LICENSE'
    }
    // Will be present only when generating offline installer (cf prepareOfflineInstaller task)
    from("${layout.buildDirectory.get()}/tmp/offline-installation.zip")
}

task publishWindowsInstaller(type: PublishInstallerTask) {
    dependsOn 'createInnoSetupPackage'
    file = "installer/LifeCompanion-setup-${project.version}.exe"
    system = 'WINDOWS'
}

task publishUnixInstaller(type: PublishInstallerTask) {
    dependsOn 'jlinkZip'
    file = 'image-linux_x64.zip'
    system = 'UNIX'
}

task publishMacInstaller(type: PublishInstallerTask) {
    dependsOn 'jlinkZip'
    file = 'image-mac_x64.zip'
    system = 'MAC'
}

task createInnoSetupPackage(type: Exec) {
    group = 'lifecompanion'
    description 'Build the JVM from JLink and package it into an InnoSetup installer (with script from build-src)'
    dependsOn 'jlinkZip'
    onlyIf {
        OperatingSystem.current().isWindows()
    }
    commandLine project.property('innosetup.path'), 'build-src/lc-installer.iss',
            "-DAppVersion=${project.version}",
            "-DInputDir=${project.buildDir.path}/image/lifecompanion-installer-win_x64",
            "/O${project.buildDir.path}/installer"
}